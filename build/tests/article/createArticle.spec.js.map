{"version":3,"sources":["../../../server/tests/article/createArticle.spec.js"],"names":["expect","chai","use","chaiHttp","createArticle","Article","deleteMany","it","done","request","server","post","send","title","subtitle","image","content","author","end","err","res","to","be","have","status","body","property","set","ArticleValues","validToken","Array","join","validArticle","blog","find","not"],"mappings":"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","sourcesContent":["import chai from \"chai\";\r\nimport { beforeEach, afterEach } from \"mocha\";\r\n\r\nimport chaiHttp from \"chai-http\";\r\nimport server from \"../../index\";\r\nimport ArticleValues from \"../asset/article\";\r\nimport Article from \"../../models/Article\";\r\n\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst createArticle = () => {\r\n  beforeEach(async () => {\r\n    await Article.deleteMany({});\r\n  });\r\n  afterEach(async () => {\r\n    await Article.deleteMany({});\r\n  });\r\n  it(\"should return 401 status if client is not logged in\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/articles/create\")\r\n      .send({\r\n        title: \"first title\",\r\n        subtitle: \"first subtitle ever\",\r\n        image: \"images/og-default.jpg\",\r\n        content: \"this is content for testing article api\",\r\n        author: \"gilbert\",\r\n      })\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(401);\r\n        expect(res.body).to.have.property(\"message\", \"access denied\");\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 400 status if blog required field is not provided correctly\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/articles/create\")\r\n      .set(ArticleValues.validToken)\r\n      .send({\r\n        title: \"\",\r\n        subtitle: \"first subtitle ever\",\r\n        image: \"images/og-default.jpg\",\r\n        content: \"this is content for testing article api\",\r\n        author: \"gilbert\",\r\n      })\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 400 status if blog title and subtitle length is less than 8 characters\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/articles/create\")\r\n      .set(ArticleValues.validToken)\r\n      .send({\r\n        title: \"title 1\",\r\n        subtitle: \"subtitl\",\r\n        image: \"images/og-default.jpg\",\r\n        content: \"this is content for testing article api\",\r\n        author: \"gilbert\",\r\n      })\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 400 status if blog title length is greater than 25 characters and subtitle length is greater than 50 charachers\", (done) => {\r\n    const title = new Array(27).join(\"a\");\r\n    const subtitle = new Array(52).join(\"a\");\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/articles/create\")\r\n      .set(ArticleValues.validToken)\r\n      .send({\r\n        title,\r\n        subtitle,\r\n        image: \"images/og-default.jpg\",\r\n        content: \"this is content for testing article api\",\r\n        author: \"gilbert\",\r\n      })\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should save article in the database if it is valid\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/articles/create\")\r\n      .set(ArticleValues.validToken)\r\n      .send(ArticleValues.validArticle);\r\n\r\n    const blog = Article.find(ArticleValues.validArticle);\r\n    expect(blog).not.to.be.null;\r\n\r\n    done();\r\n  });\r\n  // it(\"should return article if it is valid and return 201 status\", (done) => {\r\n  //   chai\r\n  //     .request(server)\r\n  //     .post(\"/api/articles/create\")\r\n  //     .set(ArticleValues.validToken)\r\n  //     .send(ArticleValues.validArticle)\r\n  //     .end((err, res) => {\r\n  //       expect(err).to.be.null;\r\n  //       expect(res).to.have.status(201);\r\n  //       expect(res.body).to.have.a.property(\"data\");\r\n  //       expect(res.body).to.have.a.property(\r\n  //         \"message\",\r\n  //         \"Post created successfully\"\r\n  //       );\r\n  //       done();\r\n  //     });\r\n  // });\r\n};\r\n\r\nexport default createArticle;\r\n"],"file":"createArticle.spec.js"}