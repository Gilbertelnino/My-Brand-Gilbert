{"version":3,"sources":["../../../server/tests/article/getSingleBlog.spec.js"],"names":["expect","chai","use","chaiHttp","getSingleBlog","Article","deleteMany","server","close","it","done","article","ArticleValues","validArticle","save","request","get","_id","end","err","res","to","be","have","status","body","property","a"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;IAEQA,M,GAAWC,gB,CAAXD,M;;AACRC,iBAAKC,GAAL,CAASC,oBAAT;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,8FAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFC,oBAAQC,UAAR,CAAmB,EAAnB,CADE;;AAAA;AAERC,8BAAOC,KAAP;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAIAC,EAAAA,EAAE,CAAC,+DAAD,EAAkE,UAACC,IAAD,EAAU;AAC5E,QAAMC,OAAO,GAAG,IAAIN,mBAAJ,CAAYO,oBAAcC,YAA1B,CAAhB;AACAF,IAAAA,OAAO,CAACG,IAAR;;AACAb,qBACGc,OADH,CACWR,iBADX,EAEGS,GAFH,CAEO,mBAAmBL,OAAO,CAACM,GAFlC,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBpB,MAAAA,MAAM,CAACmB,GAAD,CAAN,CAAYE,EAAZ,CAAeC,EAAf;AACAtB,MAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYC,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAxB,MAAAA,MAAM,CAACoB,GAAG,CAACK,IAAL,CAAN,CAAiBJ,EAAjB,CAAoBE,IAApB,CAAyBG,QAAzB,CACE,SADF,EAEE,2BAFF;AAIA1B,MAAAA,MAAM,CAACoB,GAAG,CAACK,IAAL,CAAN,CAAiBJ,EAAjB,CAAoBE,IAApB,CAAyBI,CAAzB,CAA2BD,QAA3B,CAAoC,MAApC;AACAhB,MAAAA,IAAI;AACL,KAZH;AAaD,GAhBC,CAAF;AAiBAD,EAAAA,EAAE,CAAC,4EAAD,EAA+E,UAACC,IAAD,EAAU;AACzFT,qBACGc,OADH,CACWR,iBADX,EAEGS,GAFH,CAEO,iBAFP,EAGGE,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBpB,MAAAA,MAAM,CAACmB,GAAD,CAAN,CAAYE,EAAZ,CAAeC,EAAf;AACAtB,MAAAA,MAAM,CAACoB,GAAD,CAAN,CAAYC,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAxB,MAAAA,MAAM,CAACoB,GAAG,CAACK,IAAL,CAAN,CAAiBJ,EAAjB,CAAoBE,IAApB,CAAyBG,QAAzB,CAAkC,OAAlC,EAA2C,WAA3C;AACAhB,MAAAA,IAAI;AACL,KARH;AASD,GAVC,CAAF;AAWD,CAjCD;;eAmCeN,a","sourcesContent":["import chai from \"chai\";\r\nimport chaiHttp from \"chai-http\";\r\nimport { afterEach } from \"mocha\";\r\nimport server from \"../../index\";\r\nimport Article from \"../../models/Article\";\r\nimport ArticleValues from \"../asset/article\";\r\n\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst getSingleBlog = () => {\r\n  afterEach(async () => {\r\n    await Article.deleteMany({});\r\n    server.close();\r\n  });\r\n  it(\"should return an article and 200 status if valid id is passed\", (done) => {\r\n    const article = new Article(ArticleValues.validArticle);\r\n    article.save();\r\n    chai\r\n      .request(server)\r\n      .get(\"/api/articles/\" + article._id)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(200);\r\n        expect(res.body).to.have.property(\r\n          \"message\",\r\n          \"post fetched successfully\"\r\n        );\r\n        expect(res.body).to.have.a.property(\"data\");\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 404 if no article found in the database or invalid id passed\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .get(\"/api/articles/1\")\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(404);\r\n        expect(res.body).to.have.property(\"error\", \"Not Found\");\r\n        done();\r\n      });\r\n  });\r\n};\r\n\r\nexport default getSingleBlog;\r\n"],"file":"getSingleBlog.spec.js"}