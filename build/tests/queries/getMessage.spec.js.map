{"version":3,"sources":["../../../server/tests/queries/getMessage.spec.js"],"names":["expect","chai","use","chaiHttp","getMessage","it","done","request","server","get","set","VerifiedToken","validToken","end","err","res","to","be","have","status","body","property","Message","collection","insertMany","name","email","message"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;IAEQA,M,GAAWC,gB,CAAXD,M;;AACRC,iBAAKC,GAAL,CAASC,oBAAT;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBC,EAAAA,EAAE,CAAC,iDAAD,EAAoD,UAACC,IAAD,EAAU;AAC9DL,qBACGM,OADH,CACWC,iBADX,EAEGC,GAFH,CAEO,cAFP,EAGGC,GAHH,CAGOC,oBAAcC,UAHrB,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACc,GAAD,CAAN,CAAYE,EAAZ,CAAeC,EAAf;AACAjB,MAAAA,MAAM,CAACe,GAAD,CAAN,CAAYC,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAnB,MAAAA,MAAM,CAACe,GAAG,CAACK,IAAL,CAAN,CAAiBJ,EAAjB,CAAoBE,IAApB,CAAyBG,QAAzB,CAAkC,OAAlC,EAA2C,iBAA3C;AACAf,MAAAA,IAAI;AACL,KATH;AAUD,GAXC,CAAF;AAYAD,EAAAA,EAAE,CAAC,wDAAD,EAA2D,UAACC,IAAD,EAAU;AACrEL,qBACGM,OADH,CACWC,iBADX,EAEGC,GAFH,CAEO,cAFP,EAGGI,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACc,GAAD,CAAN,CAAYE,EAAZ,CAAeC,EAAf;AACAjB,MAAAA,MAAM,CAACe,GAAD,CAAN,CAAYC,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAb,MAAAA,IAAI;AACL,KAPH;AAQD,GATC,CAAF;AAUAD,EAAAA,EAAE,CAAC,kDAAD,EAAqD,UAACC,IAAD,EAAU;AAC/DgB,wBAAQC,UAAR,CAAmBC,UAAnB,CAA8B,CAC5B;AACEC,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,KAAK,EAAE,eAFT;AAGEC,MAAAA,OAAO,EAAE;AAHX,KAD4B,EAM5B;AACEF,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,KAAK,EAAE,gBAFT;AAGEC,MAAAA,OAAO,EAAE;AAHX,KAN4B,CAA9B;;AAYA1B,qBACGM,OADH,CACWC,iBADX,EAEGC,GAFH,CAEO,cAFP,EAGGC,GAHH,CAGOC,oBAAcC,UAHrB,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBf,MAAAA,MAAM,CAACc,GAAD,CAAN,CAAYE,EAAZ,CAAeC,EAAf;AACAjB,MAAAA,MAAM,CAACe,GAAD,CAAN,CAAYC,EAAZ,CAAeE,IAAf,CAAoBC,MAApB,CAA2B,GAA3B;AACAb,MAAAA,IAAI;AACL,KARH;AASD,GAtBC,CAAF;AAuBD,CA9CD;;eAgDeF,U","sourcesContent":["import chai from \"chai\";\r\n\r\nimport chaiHttp from \"chai-http\";\r\nimport server from \"../../index\";\r\nimport Message from \"../../models/Message\";\r\nimport VerifiedToken from \"../asset/article\";\r\n\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst getMessage = () => {\r\n  it(\"should return 404 status if there is no message\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .get(\"/api/queries\")\r\n      .set(VerifiedToken.validToken)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(404);\r\n        expect(res.body).to.have.property(\"error\", \"No message Yet!\");\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 401 status if there is no Token provided\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .get(\"/api/queries\")\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(401);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return message if there is verified token\", (done) => {\r\n    Message.collection.insertMany([\r\n      {\r\n        name: \"gibert\",\r\n        email: \"gil@gmail.com\",\r\n        message: \"this is a message for testing\",\r\n      },\r\n      {\r\n        name: \"elnino\",\r\n        email: \"elni@gmail.com\",\r\n        message: \"this is a second message for testing\",\r\n      },\r\n    ]);\r\n    chai\r\n      .request(server)\r\n      .get(\"/api/queries\")\r\n      .set(VerifiedToken.validToken)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(200);\r\n        done();\r\n      });\r\n  });\r\n};\r\n\r\nexport default getMessage;\r\n"],"file":"getMessage.spec.js"}