{"version":3,"sources":["../../../server/tests/user/createProfile.spec.js"],"names":["expect","chai","use","chaiHttp","createProfile","beforeEach","Profile","deleteMany","it","done","request","server","post","send","ProfileValues","validProfile","end","err","res","to","be","have","status","body","property","invalidProfile","set","VerifiedToken","validToken","invalidProfileValue","profile","find","not"],"mappings":"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","sourcesContent":["import chai from \"chai\";\r\nimport { afterEach } from \"mocha\";\r\n\r\nimport chaiHttp from \"chai-http\";\r\nimport server from \"../../index\";\r\nimport ProfileValues from \"../asset/userData\";\r\nimport Profile from \"../../models/Profile\";\r\nimport VerifiedToken from \"../asset/article\";\r\n\r\nconst { expect } = chai;\r\nchai.use(chaiHttp);\r\n\r\nconst createProfile = () => {\r\n  beforeEach(async () => {\r\n    await Profile.deleteMany({});\r\n  });\r\n  afterEach(async () => {\r\n    await Profile.deleteMany({});\r\n  });\r\n  it(\"should return 401 status if admin is not logged in\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/profile/create\")\r\n      .send(ProfileValues.validProfile)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(401);\r\n        expect(res.body).to.have.property(\"message\", \"access denied\");\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 400 status if profile form is not filled correctly\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/profile/create\")\r\n      .send(ProfileValues.invalidProfile)\r\n      .set(VerifiedToken.validToken)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should return 400 status if profile value is less than 3 characters\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/profile/create\")\r\n      .set(VerifiedToken.validToken)\r\n      .send(ProfileValues.invalidProfileValue)\r\n      .end((err, res) => {\r\n        expect(err).to.be.null;\r\n        expect(res).to.have.status(400);\r\n        done();\r\n      });\r\n  });\r\n  it(\"should save profile in the database if it is valid\", (done) => {\r\n    chai\r\n      .request(server)\r\n      .post(\"/api/profile/create\")\r\n      .set(VerifiedToken.validToken)\r\n      .send(ProfileValues.validProfile);\r\n\r\n    const profile = Profile.find(ProfileValues.validProfile);\r\n    expect(profile).not.to.be.null;\r\n\r\n    done();\r\n  });\r\n};\r\n\r\nexport default createProfile;\r\n"],"file":"createProfile.spec.js"}