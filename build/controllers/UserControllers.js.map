{"version":3,"sources":["../../server/controllers/UserControllers.js"],"names":["UserController","req","res","body","error","details","message","Admin","findOne","email","emailExist","bcrypt","genSalt","salt","hash","password","hashedPassword","admin","save","saveAdmin","user","compare","validPassword","token","jwt","sign","process","env","TOKEN_SECRET_KEY","header","json"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IAEaA,c;;;;;;;AACX;;iGACwBC,G,EAAKC,G;;;;;;;AAC3B;mCACkB,iCAAgBD,GAAG,CAACE,IAApB,C,EAAVC,K,oBAAAA,K;;qBACJA,K;;;;;iDAAc,uBAAQF,GAAR,EAAa,GAAb,EAAkBE,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,OAAnC,C;;;;uBAGOC,iBAAMC,OAAN,CAAc;AAAEC,kBAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM;AAAlB,iBAAd,C;;;AAAnBC,gBAAAA,U;;qBACFA,U;;;;;iDAAmB,uBAAQR,GAAR,EAAa,GAAb,EAAkB,qBAAlB,C;;;;uBAIJS,qBAAOC,OAAP,CAAe,EAAf,C;;;AAAbC,gBAAAA,I;;uBACuBF,qBAAOG,IAAP,CAAYb,GAAG,CAACE,IAAJ,CAASY,QAArB,EAA+BF,IAA/B,C;;;AAAvBG,gBAAAA,c;AAEAC,gBAAAA,K,GAAQ,IAAIV,gBAAJ,CAAU;AACtBE,kBAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM,KADM;AAEtBM,kBAAAA,QAAQ,EAAEC;AAFY,iBAAV,C;;;uBAMYC,KAAK,CAACC,IAAN,E;;;AAAlBC,gBAAAA,S;iDACC,yBAAUjB,GAAV,EAAe,GAAf,EAAoB,2BAApB,EAAiDiB,SAAjD,C;;;;;iDAEA,uBAAQjB,GAAR,EAAa,GAAb,EAAkB,uBAAlB,C;;;;;;;;;;;;;;;;;;;iGAGYD,G,EAAKC,G;;;;;;;oCACR,iCAAgBD,GAAG,CAACE,IAApB,C,EAAVC,K,qBAAAA,K;;qBACJA,K;;;;;kDAAc,uBAAQF,GAAR,EAAa,GAAb,EAAkBE,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,OAAnC,C;;;;uBAGCC,iBAAMC,OAAN,CAAc;AAAEC,kBAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM;AAAlB,iBAAd,C;;;AAAbW,gBAAAA,I;;oBACDA,I;;;;;kDAAa,uBAAQlB,GAAR,EAAa,GAAb,EAAkB,2BAAlB,C;;;;uBAGUS,qBAAOU,OAAP,CAC1BpB,GAAG,CAACE,IAAJ,CAASY,QADiB,EAE1BK,IAAI,CAACL,QAFqB,C;;;AAAtBO,gBAAAA,a;;oBAIDA,a;;;;;kDAAsB,uBAAQpB,GAAR,EAAa,GAAb,EAAkB,2BAAlB,C;;;AAE3B;AAEMqB,gBAAAA,K,GAAQC,yBAAIC,IAAJ,CAAS;AAAEL,kBAAAA,IAAI,EAAEA;AAAR,iBAAT,EAAyBM,OAAO,CAACC,GAAR,CAAYC,gBAArC,C;AACd1B,gBAAAA,GAAG,CAAC2B,MAAJ,CAAW,YAAX,EAAyBN,KAAzB,EAAgCO,IAAhC,CAAqC;AACnCP,kBAAAA,KAAK,EAALA,KADmC;AAEnCjB,kBAAAA,OAAO,EAAE;AAF0B,iBAArC","sourcesContent":["import bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport Admin from \"../models/User\";\r\nimport { loginValidation } from \"../validator/validation\";\r\nimport { onError, onSuccess } from \"../utils/response\";\r\n\r\nexport class UserController {\r\n  // create user\r\n  static async createUser(req, res) {\r\n    // validate signup\r\n    const { error } = loginValidation(req.body);\r\n    if (error) return onError(res, 400, error.details[0].message);\r\n    // check user if is already an admin\r\n\r\n    const emailExist = await Admin.findOne({ email: req.body.email });\r\n    if (emailExist) return onError(res, 400, \"Email already exist\");\r\n\r\n    // Hash passwords\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(req.body.password, salt);\r\n\r\n    const admin = new Admin({\r\n      email: req.body.email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    try {\r\n      const saveAdmin = await admin.save();\r\n      return onSuccess(res, 201, \"Admin Signup successfully\", saveAdmin);\r\n    } catch (err) {\r\n      return onError(res, 500, \"Internal Server error\");\r\n    }\r\n  }\r\n  static async loginUser(req, res) {\r\n    const { error } = loginValidation(req.body);\r\n    if (error) return onError(res, 400, error.details[0].message);\r\n    // check if is exists\r\n\r\n    const user = await Admin.findOne({ email: req.body.email });\r\n    if (!user) return onError(res, 401, \"Invalid Email or Password\");\r\n\r\n    // check if password is correct\r\n    const validPassword = await bcrypt.compare(\r\n      req.body.password,\r\n      user.password\r\n    );\r\n    if (!validPassword) return onError(res, 401, \"Invalid Email or Password\");\r\n\r\n    // create a token\r\n\r\n    const token = jwt.sign({ user: user }, process.env.TOKEN_SECRET_KEY);\r\n    res.header(\"auth-token\", token).json({\r\n      token,\r\n      message: \"User Logged in successfully\",\r\n    });\r\n  }\r\n}\r\n"],"file":"UserControllers.js"}