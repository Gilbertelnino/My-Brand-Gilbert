{"version":3,"sources":["../../server/controllers/QueriesControllers.js"],"names":["QueriesControllers","req","res","body","error","details","message","query","Queries","name","email","save","saveQuery","find","queries","length","findOne","_id","params","id","deleteOne","oneMessage"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;IAEaA,kB;;;;;;;AACX;;kGACyBC,G,EAAKC,G;;;;;;;qCACV,uCAAkBD,GAAG,CAACE,IAAtB,C,EAAVC,K,sBAAAA,K;;qBACJA,K;;;;;iDAAc,uBAAQF,GAAR,EAAa,GAAb,EAAkBE,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,OAAnC,C;;;AACZC,gBAAAA,K,GAAQ,IAAIC,mBAAJ,CAAY;AACxBC,kBAAAA,IAAI,EAAER,GAAG,CAACE,IAAJ,CAASM,IADS;AAExBC,kBAAAA,KAAK,EAAET,GAAG,CAACE,IAAJ,CAASO,KAFQ;AAGxBJ,kBAAAA,OAAO,EAAEL,GAAG,CAACE,IAAJ,CAASG;AAHM,iBAAZ,C;;;uBAOYC,KAAK,CAACI,IAAN,E;;;AAAlBC,gBAAAA,S;iDACC,yBAAUV,GAAV,EAAe,GAAf,EAAoB,2BAApB,EAAiDU,SAAjD,C;;;;;iDAEA,uBAAQV,GAAR,EAAa,GAAb,EAAkB,uBAAlB,C;;;;;;;;;;;;;;;QAIX;;;;;mGACyBD,G,EAAKC,G;;;;;;;;uBAEJM,oBAAQK,IAAR,E;;;AAAhBC,gBAAAA,O;;sBAEFA,OAAO,CAACC,MAAR,KAAmB,C;;;;;kDACd,uBAAQb,GAAR,EAAa,GAAb,EAAkB,iBAAlB,C;;;kDAEA,yBAAUA,GAAV,EAAe,GAAf,EAAoB,8BAApB,EAAoDY,OAApD,C;;;;;;;;;kDAGF,uBAAQZ,GAAR,EAAa,GAAb,EAAkB,uBAAlB,C;;;;;;;;;;;;;;;QAIX;;;;;mGACyBD,G,EAAKC,G;;;;;;;;uBAENM,oBAAQQ,OAAR,CAAgB;AAAEC,kBAAAA,GAAG,EAAEhB,GAAG,CAACiB,MAAJ,CAAWC;AAAlB,iBAAhB,C;;;AAAdZ,gBAAAA,K;;oBACDA,K;;;;;kDACI,uBACLL,GADK,EAEL,GAFK,EAGL,gDAHK,C;;;;uBAMkBM,oBAAQY,SAAR,CAAkB;AAAEH,kBAAAA,GAAG,EAAEhB,GAAG,CAACiB,MAAJ,CAAWC;AAAlB,iBAAlB,C;;;AAAnBE,gBAAAA,U;kDACC,yBAAUnB,GAAV,EAAe,GAAf,EAAoB,8BAApB,EAAoDmB,UAApD,C;;;;;;;;;kDAGF,uBAAQnB,GAAR,EAAa,GAAb,EAAkB,uBAAlB,C","sourcesContent":["import Queries from \"../models/Message\";\r\nimport { queriesValidation } from \"../validator/queryValidator\";\r\nimport { onSuccess, onError } from \"../utils/response\";\r\n\r\nexport class QueriesControllers {\r\n  // create a message\r\n  static async createQuery(req, res) {\r\n    const { error } = queriesValidation(req.body);\r\n    if (error) return onError(res, 400, error.details[0].message);\r\n    const query = new Queries({\r\n      name: req.body.name,\r\n      email: req.body.email,\r\n      message: req.body.message,\r\n    });\r\n\r\n    try {\r\n      const saveQuery = await query.save();\r\n      return onSuccess(res, 201, \"Message sent successfully\", saveQuery);\r\n    } catch (err) {\r\n      return onError(res, 500, \"internal server error\");\r\n    }\r\n  }\r\n\r\n  // read queries/ questions\r\n  static async readQueries(req, res) {\r\n    try {\r\n      const queries = await Queries.find();\r\n\r\n      if (queries.length === 0) {\r\n        return onError(res, 404, \"No message Yet!\");\r\n      } else {\r\n        return onSuccess(res, 200, \"message fetched successfully\", queries);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"Internal Server Error\");\r\n    }\r\n  }\r\n\r\n  // delete queries\r\n  static async deleteQuery(req, res) {\r\n    try {\r\n      const query = await Queries.findOne({ _id: req.params.id });\r\n      if (!query)\r\n        return onError(\r\n          res,\r\n          404,\r\n          \"message you are trying to delete doesn't exist\"\r\n        );\r\n      else {\r\n        const oneMessage = await Queries.deleteOne({ _id: req.params.id });\r\n        return onSuccess(res, 200, \"message deleted successfully\", oneMessage);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"Internal Server Error\");\r\n    }\r\n  }\r\n}\r\n"],"file":"QueriesControllers.js"}