{"version":3,"sources":["../../server/controllers/PostControllers.js"],"names":["PostController","req","res","Blogs","find","populate","posts","length","body","error","details","message","file","post","title","subtitle","image","path","content","author","save","savePost","findOne","_id","params","id","comments","BlogComments","name","email","commentContent","blog","comment","push","comments_total","updateOne","$inc","likes","updateLikes","update","deleteOne","onePost"],"mappings":"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","sourcesContent":["import Blogs from \"../models/Article\";\r\nimport BlogComments from \"../models/CommentsModel\";\r\nimport { postValidation, commentValidation } from \"../validator/validation\";\r\nimport { onSuccess, onError } from \"../utils/response\";\r\nexport class PostController {\r\n  //  Retrieve a list of all articles\r\n  static async retriveArticles(req, res) {\r\n    try {\r\n      const posts = await Blogs.find().populate(\r\n        \"comments\",\r\n        \"name commentContent -_id\"\r\n      );\r\n\r\n      if (posts.length === 0) {\r\n        return onError(res, 404, \"No articles Yet!\");\r\n      } else {\r\n        return onSuccess(res, 200, \"post fetched successfully\", posts);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"Internal Server Error\");\r\n    }\r\n  }\r\n\r\n  // create an article\r\n  static async createPost(req, res) {\r\n    const { error } = postValidation(req.body);\r\n    if (error) return onError(res, 400, error.details[0].message);\r\n    if (!req.file) return onError(res, 400, \"Image is required\");\r\n    const post = new Blogs({\r\n      title: req.body.title,\r\n      subtitle: req.body.subtitle,\r\n      image: req.file.path,\r\n      content: req.body.content,\r\n      author: req.body.author,\r\n    });\r\n\r\n    try {\r\n      const savePost = await post.save();\r\n      return onSuccess(res, 201, \"Post created successfully\", savePost);\r\n    } catch (err) {\r\n      return onError(res, 500, \"internal server error\");\r\n    }\r\n  }\r\n  // Retrieve a single article\r\n  static async retrieveOnePost(req, res) {\r\n    try {\r\n      const post = await Blogs.findOne({ _id: req.params.id }).populate(\r\n        \"comments\",\r\n        \"name commentContent -_id\"\r\n      );\r\n\r\n      if (!post) {\r\n        return onError(res, 404, \"Post you are trying to fetch doesn't exists\");\r\n      } else {\r\n        return onSuccess(res, 200, \"post fetched successfully\", post);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"internal server error\");\r\n    }\r\n  }\r\n\r\n  // Create comment!\r\n  static async comments(req, res) {\r\n    const { error } = commentValidation(req.body);\r\n    if (error) return onError(res, 400, error.details[0].message);\r\n    const comments = new BlogComments({\r\n      name: req.body.name,\r\n      email: req.body.email,\r\n      commentContent: req.body.commentContent,\r\n    });\r\n\r\n    try {\r\n      const blog = await Blogs.findOne({ _id: req.params.id });\r\n      if (!blog) return onError(res, 404, \"post not found\");\r\n      else {\r\n        const comment = await comments.save();\r\n        blog.comments.push(comment);\r\n        blog.comments_total++;\r\n        await blog.save();\r\n\r\n        return onSuccess(res, 201, \"comment created successfully\", comment);\r\n      }\r\n    } catch (err) {\r\n      return onError(res, 500, \"internal server error\");\r\n    }\r\n  }\r\n  // Add likes\r\n  static async likes(req, res) {\r\n    try {\r\n      const blog = await Blogs.findOne({ _id: req.params.id });\r\n      if (!blog) {\r\n        return onError(res, 404, \"Not article found\");\r\n      } else {\r\n        const updateLikes = await Blogs.updateOne(\r\n          { _id: req.params.id },\r\n          { $inc: { likes: 1 } }\r\n        );\r\n        return onSuccess(res, 201, \"Like added successfully!\", updateLikes);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"Internal Server Error\");\r\n    }\r\n  }\r\n\r\n  //// Update an existing article\r\n  static async updateArticle(req, res) {\r\n    try {\r\n      const post = await Blogs.findOne({ _id: req.params.id });\r\n      if (!post) {\r\n        return onError(\r\n          res,\r\n          404,\r\n          \"posts you are trying to update doesn't exists\"\r\n        );\r\n      } else {\r\n        post.title = req.body.title;\r\n        post.subtitle = req.body.subtitle;\r\n        post.image = req.file.path;\r\n        post.content = req.body.content;\r\n        post.author = req.body.author;\r\n        const update = await post.save();\r\n        return onSuccess(res, 200, \"post updated successfully\", update);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"internal server error\");\r\n    }\r\n  }\r\n  // Delete an existing article\r\n  static async deleteArticle(req, res) {\r\n    try {\r\n      const post = await Blogs.findOne({ _id: req.params.id });\r\n      if (!post)\r\n        return onError(res, 404, \"post you are trying to delete doesn't exist\");\r\n      else {\r\n        const onePost = await Blogs.deleteOne({ _id: req.params.id });\r\n        return onSuccess(res, 200, \"post deleted successfully\", onePost);\r\n      }\r\n    } catch (error) {\r\n      return onError(res, 500, \"Internal Server Error\");\r\n    }\r\n  }\r\n}\r\n"],"file":"PostControllers.js"}